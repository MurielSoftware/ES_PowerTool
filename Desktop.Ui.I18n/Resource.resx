<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="App_Title" xml:space="preserve">
    <value>ES Power Tool</value>
  </data>
  <data name="label_folder_csv_path" xml:space="preserve">
    <value>Path to CSV Folder</value>
  </data>
  <data name="label_new_project" xml:space="preserve">
    <value>New Project</value>
  </data>
  <data name="label_type_csv_path" xml:space="preserve">
    <value>Path to CSV Type</value>
  </data>
  <data name="label_type_element_csv_path" xml:space="preserve">
    <value>Path to CSV Type Element</value>
  </data>
  <data name="label_csv_category" xml:space="preserve">
    <value>CSV Paths</value>
  </data>
  <data name="label_common_category" xml:space="preserve">
    <value>Common</value>
  </data>
  <data name="label_name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="label_project" xml:space="preserve">
    <value>Project</value>
  </data>
  <data name="label_open_project" xml:space="preserve">
    <value>Open project</value>
  </data>
  <data name="label_built_in" xml:space="preserve">
    <value>Built-in</value>
  </data>
  <data name="label_derivable" xml:space="preserve">
    <value>Derivable</value>
  </data>
  <data name="label_description" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="label_folder" xml:space="preserve">
    <value>Folder</value>
  </data>
  <data name="label_loading" xml:space="preserve">
    <value>Loading...</value>
  </data>
  <data name="label_optional" xml:space="preserve">
    <value>Optional</value>
  </data>
  <data name="label_runtime_id" xml:space="preserve">
    <value>Runtime ID</value>
  </data>
  <data name="label_specific_category" xml:space="preserve">
    <value>Specific</value>
  </data>
  <data name="label_type" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="label_type_element" xml:space="preserve">
    <value>Type element</value>
  </data>
  <data name="label_unique_name" xml:space="preserve">
    <value>Unique name</value>
  </data>
  <data name="label_element_type" xml:space="preserve">
    <value>Element Type</value>
  </data>
  <data name="label_supertypes" xml:space="preserve">
    <value>Super types</value>
  </data>
  <data name="label_generate_csv" xml:space="preserve">
    <value>Generate CSV</value>
  </data>
  <data name="label_preset" xml:space="preserve">
    <value>Preset</value>
  </data>
  <data name="label_preset_csv_path" xml:space="preserve">
    <value>Path to CSV Presets</value>
  </data>
  <data name="label_default_preset_csv_path" xml:space="preserve">
    <value>Path to CSV default Preset</value>
  </data>
  <data name="label_type_type_csv_path" xml:space="preserve">
    <value>Path to super type</value>
  </data>
  <data name="question_do_you_want_to_remove_objects_message" xml:space="preserve">
    <value>Do you want to remove the selected objects?</value>
  </data>
  <data name="question_do_you_want_to_remove_object_message" xml:space="preserve">
    <value>Do you want to remove '{0}'?</value>
  </data>
  <data name="validation_message_type_is_used_as_super_type" xml:space="preserve">
    <value>Type '{0}' is used as a supertype for '{1}'</value>
  </data>
  <data name="validation_message_type_is_used_as_type_element" xml:space="preserve">
    <value>Type '{0}' is used as a element type for composite type element '{1}'</value>
  </data>
  <data name="label_preset_element_csv_path" xml:space="preserve">
    <value>Path to CSV Preset Element</value>
  </data>
  <data name="label_about" xml:space="preserve">
    <value>About</value>
  </data>
  <data name="validation_message_preset_is_associated_to_preset_element" xml:space="preserve">
    <value>Preset '{0}' is used as associated preset for composite preset element '{1}'</value>
  </data>
  <data name="validation_message_type_is_used_as_element_type_in_folder" xml:space="preserve">
    <value>The type '{0}' from folder '{1}' has type element which uses the type as element type from removed folder or subfolder</value>
  </data>
  <data name="validation_message_type_is_used_as_super_type_in_folder" xml:space="preserve">
    <value>Type '{0}' from folder '{1}' uses the type as a supertype from removed folder or subfolder</value>
  </data>
  <data name="error_message_generated_csv_failed" xml:space="preserve">
    <value>Error during generating the CSV files</value>
  </data>
  <data name="label_generate_liquibase" xml:space="preserve">
    <value>Generate Liquibase</value>
  </data>
  <data name="label_settings" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="label_generate_guid" xml:space="preserve">
    <value>Generate UUID</value>
  </data>
  <data name="ribbon_group_about_label" xml:space="preserve">
    <value>About</value>
  </data>
  <data name="ribbon_group_generate_label" xml:space="preserve">
    <value>Generate</value>
  </data>
  <data name="ribbon_group_project_label" xml:space="preserve">
    <value>Project</value>
  </data>
  <data name="ribbon_group_tools_label" xml:space="preserve">
    <value>Tools</value>
  </data>
  <data name="ribbon_tab_common_label" xml:space="preserve">
    <value>COMMON</value>
  </data>
  <data name="ribbon_tab_help_label" xml:space="preserve">
    <value>HELP</value>
  </data>
  <data name="label_close_project" xml:space="preserve">
    <value>Close project</value>
  </data>
  <data name="label_cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="label_close" xml:space="preserve">
    <value>Close</value>
  </data>
  <data name="label_column_name" xml:space="preserve">
    <value>Column name</value>
  </data>
  <data name="label_count" xml:space="preserve">
    <value>Count</value>
  </data>
  <data name="label_default_conversions_of_data_types" xml:space="preserve">
    <value>Default data type conversions</value>
  </data>
  <data name="label_exit" xml:space="preserve">
    <value>Exit</value>
  </data>
  <data name="label_finish" xml:space="preserve">
    <value>Finish</value>
  </data>
  <data name="label_generate" xml:space="preserve">
    <value>Generate</value>
  </data>
  <data name="label_liquibase_category" xml:space="preserve">
    <value>Liquibase</value>
  </data>
  <data name="label_message" xml:space="preserve">
    <value>Message</value>
  </data>
  <data name="label_messages" xml:space="preserve">
    <value>Messages</value>
  </data>
  <data name="label_ok" xml:space="preserve">
    <value>OK</value>
  </data>
  <data name="label_reference" xml:space="preserve">
    <value>Reference</value>
  </data>
  <data name="label_remove_brackets" xml:space="preserve">
    <value>Remove brackets</value>
  </data>
  <data name="label_sql_data_type" xml:space="preserve">
    <value>Liquibase SQL data type</value>
  </data>
  <data name="label_type_element_data_type" xml:space="preserve">
    <value>Type element data type</value>
  </data>
  <data name="label_uppercase" xml:space="preserve">
    <value>Uppercase</value>
  </data>
  <data name="label_composite_preset_element" xml:space="preserve">
    <value>Composite preset element</value>
  </data>
  <data name="label_column_name_annotation" xml:space="preserve">
    <value>@Column</value>
  </data>
  <data name="label_generated_code" xml:space="preserve">
    <value>Generated code</value>
  </data>
  <data name="label_id_annotation" xml:space="preserve">
    <value>@Id</value>
  </data>
  <data name="label_transient_annotation" xml:space="preserve">
    <value>@Transient</value>
  </data>
  <data name="label_code" xml:space="preserve">
    <value>Code</value>
  </data>
  <data name="label_java_data_type" xml:space="preserve">
    <value>Java code data type</value>
  </data>
  <data name="label_content_built_in" xml:space="preserve">
    <value>Content Built-in</value>
  </data>
  <data name="validation_message_name_is_not_unique" xml:space="preserve">
    <value>The name '{0}' is not unique</value>
  </data>
  <data name="error_message_wrong_csv_file_on_input" xml:space="preserve">
    <value>Nevalidní soubor na vstupu</value>
  </data>
  <data name="label_allow_to_edit_imported_elements" xml:space="preserve">
    <value>Allow to edit imported elements</value>
  </data>
</root>