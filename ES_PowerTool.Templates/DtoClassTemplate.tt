<#@ template language="C#" #>
<#@ import namespace="System" #>
<#@ import namespace="ES_PowerTool.Templates.Structures" #>
<#@ parameter name="_classStructure" type="ES_PowerTool.Templates.Structures.ClassStructure" #>
package <#= _classStructure.Namespace #>

public class <#= _classStructure.Name #>Dto
{
<# foreach(FieldStructure field in _classStructure.Fields) { 
	if(!IsSymbolicReference(field.DataType)) { #>	
	<#= field.Modifier.ToString().ToLower() #> <#= field.DataType #> <#= field.Name #>;
<# }
} #>

<# foreach(FieldStructure field in _classStructure.Fields) { #>
	public <#= field.DataType.ToString().ToLower() #> <#= CreateGetterName(field) #>() {
		return <#= CreateGetterBody(field) #>;
	}

	public void set<#= field.Name #>(<#= field.DataType #> <#= field.Name #>) {
		<#= CreateSetterBody(field) #>;
	}

<# } #>
}

<#+
    public string CreateGetterName(FieldStructure field)
    {
        string prefix = "boolean".Equals(field.DataType) ? "is" : "get";
		return prefix + field.Name;
    }

	public string CreateGetterBody(FieldStructure field)
	{
		if("SymbolicReference".Equals(field.DataType) || "SymbolicReferenceDto".Equals(field.DataType))
		{
			return "getReferences().get(..)";
		}
		return field.Name;
	}

	public string CreateSetterBody(FieldStructure field)
	{
		if(IsSymbolicReference(field.DataType))
		{
			return "getReferences().put(..," + field.Name +")";
		}
		return "this." + field.Name + " = " + field.Name;
	}

	public bool IsSymbolicReference(string dataType)
	{
		return "SymbolicReference".Equals(dataType) || "SymbolicReferenceDto".Equals(dataType);
	}
#>